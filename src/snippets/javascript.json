{
  "ðŸŸ¨ useStrict": {
    "prefix": "uss",
    "body": [
      "'use strict'"
    ],
    "description": "Insert 'use strict' Statement",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ require": {
    "prefix": "rqr",
    "body": "require('${1:package}');",
    "description": "Require a package",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "Require a package to const",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "Module exports from Common JS",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleAssert": {
    "key": "consoleAssert",
    "prefix": "cas",
    "body": [
      "console.assert(${1:expression}, ${2:data})"
    ],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleClear": {
    "key": "consoleClear",
    "prefix": "ccl",
    "body": [
      "console.clear()"
    ],
    "description": "Clears the console",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleCount": {
    "key": "consoleCount",
    "prefix": "cco",
    "body": [
      "console.count(${1:message})"
    ],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleDir": {
    "key": "consoleDir",
    "prefix": "cdi",
    "body": [
      "console.dir(${1:message})"
    ],
    "description": "Prints a JavaScript representation of the specified object",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleError": {
    "key": "consoleError",
    "prefix": "cer",
    "body": [
      "console.error(${1:message})"
    ],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleGroup": {
    "key": "consoleGroup",
    "prefix": "cgr",
    "body": [
      "console.group('${1:message}')"
    ],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleGroupEnd": {
    "key": "consoleGroupEnd",
    "prefix": "cge",
    "body": [
      "console.groupEnd()"
    ],
    "description": "Closes out the corresponding console.group().",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleLog": {
    "key": "consoleLog",
    "prefix": "clg",
    "body": [
      "console.log(${1:message})"
    ],
    "description": "Displays a message in the console",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleTrace": {
    "key": "consoleTrace",
    "prefix": "ctr",
    "body": [
      "console.trace(${1:message})"
    ],
    "description": "Prints a stack trace from the point where the method was called",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleLogObject": {
    "key": "consoleLogObject",
    "prefix": "clo",
    "body": [
      "console.log('${1:params}', ${2:data})"
    ],
    "description": "Logs property with name.",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleLogJson": {
    "key": "consoleLogJson",
    "prefix": "clj",
    "body": [
      "console.log('${1:message}', JSON.stringify(${2:message}, null, 2))"
    ],
    "description": "Logs stringified JSON property with name.",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleTime": {
    "key": "consoleTime",
    "prefix": "ctm",
    "body": [
      "console.time('${1:message}')"
    ],
    "description": "Console time wrapper",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleTimeEnd": {
    "key": "consoleTimeEnd",
    "prefix": "cte",
    "body": [
      "console.timeEnd('${1:message}')"
    ],
    "description": "Console time end wrapper",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleWarn": {
    "key": "consoleWarn",
    "prefix": "cwa",
    "body": [
      "console.warn(${1:message})"
    ],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleInfo": {
    "key": "consoleInfo",
    "prefix": "cin",
    "body": [
      "console.info(${1:message})"
    ],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ consoleTable": {
    "key": "consoleTable",
    "prefix": "ctl",
    "body": [
      "console.table([${1:message}])"
    ],
    "description": "Logs table to console",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ importAs": {
    "key": "importAs",
    "prefix": "ima",
    "body": [
      "import { ${2:moduleName} as ${3:alias} } from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ importDestructing": {
    "key": "importDestructing",
    "prefix": "imd",
    "body": [
      "import { ${2:} } from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ importEverything": {
    "key": "importEverything",
    "prefix": "ime",
    "body": [
      "import * as ${2:moduleName} from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ importNoModuleName": {
    "key": "importNoModuleName",
    "prefix": "imn",
    "body": [
      "import '${1:moduleName}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ import": {
    "key": "import",
    "prefix": "imp",
    "body": [
      "import ${2:moduleName} from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportAs": {
    "key": "exportAs",
    "prefix": "exa",
    "body": [
      "export { ${2:moduleName} as ${3:alias} } from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportDestructing": {
    "key": "exportDestructing",
    "prefix": "exd",
    "body": [
      "export { ${2:} } from '${1:module}'"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportDefault": {
    "key": "exportDefault",
    "prefix": "exp",
    "body": [
      "export default ${1:module}"
    ],
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportNamedVariable": {
    "key": "exportNamedVariable",
    "prefix": "econ",
    "body": [
      "export const ${1:params} = ${2:data}"
    ],
    "description": "Export named variable",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportNamedFunction": {
    "key": "exportNamedFunction",
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}"
    ],
    "description": "Export named function",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportDefaultFunction": {
    "key": "exportDefaultFunction",
    "prefix": "edf",
    "body": [
      "export default (${1:functionName}) => {${2:params}}"
    ],
    "description": "Export default function",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportDefaultNamedFunction": {
    "key": "exportDefaultNamedFunction",
    "prefix": "ednf",
    "body": [
      "export default function ${1:functionName}(${2:params}) {\n\t$0\n}"
    ],
    "description": "Export default named function",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ method": {
    "key": "method",
    "prefix": "met",
    "body": [
      "${1:functionName}(${2:params}) {\n\t$0\n}"
    ],
    "description": "Creates a method inside a class",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ constructor": {
    "key": "constructor",
    "prefix": "con",
    "body": [
      "constructor(${1:params}) {\n\t$0\n}"
    ],
    "description": "Add default constructor in a class",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportClass": {
    "key": "exportClass",
    "prefix": "ecl",
    "body": [
      "export default class ${1:className} {\n\t$0\n}"
    ],
    "description": "Export default class",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ exportClassExtends": {
    "key": "exportClassExtends",
    "prefix": "ece",
    "body": [
      "export default class ${1:className} extends ${2:baseClassName} {\n\t$0\n}"
    ],
    "description": "Export default class which extends a base one",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ propertyGet": {
    "key": "propertyGet",
    "prefix": "pge",
    "body": [
      "get ${1:functionName}() {",
      "  return this.$0",
      "}"
    ],
    "description": "Creates a getter property inside a class",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ propertySet": {
    "key": "propertySet",
    "prefix": "pse",
    "body": [
      "set ${1:functionName}(${2:value}) {\n\t$0\n}"
    ],
    "description": "Creates a setter property inside a class",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ anonymousFunction": {
    "key": "anonymousFunction",
    "prefix": "anfn",
    "body": [
      "(${1:params}) => {\n\t$0\n}"
    ],
    "description": "Creates an anonymous function",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ namedFunction": {
    "key": "namedFunction",
    "prefix": "nfn",
    "body": [
      "const ${1:functionName} = (${2:params}) => {\n\t$0\n}"
    ],
    "description": "Creates a named function",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ forEach": {
    "key": "forEach",
    "prefix": "fre",
    "body": [
      "${1:array}.forEach(${2:item} => {\n\t$0\n})"
    ],
    "description": "Creates a forEach statement",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ forOf": {
    "key": "forOf",
    "prefix": "fof",
    "body": [
      "for(const ${1:item} of ${2:array}) {\n\t$0\n}"
    ],
    "description": "Iterating over property names of iterable objects",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ forIn": {
    "key": "forIn",
    "prefix": "fin",
    "body": [
      "for(const ${1:item} in ${2:object}) {\n\t$0\n}"
    ],
    "description": "Iterating over property values of iterable objects",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ constVariable": {
    "key": "constVariable",
    "prefix": "cos",
    "body": [
      "const ${1:params} = ${2:value}"
    ],
    "description": "Creates and assigns a local variable",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ destructingObject": {
    "key": "destructingObject",
    "prefix": "dob",
    "body": [
      "const {${2:value}} = ${1:object}"
    ],
    "description": "Creates and assigns a local variable using object destructing",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ destructingArray": {
    "key": "destructingArray",
    "prefix": "dar",
    "body": [
      "const [${2:data}] = ${1:array}"
    ],
    "description": "Creates and assigns a local variable using array destructing",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ setInterval": {
    "key": "setInterval",
    "prefix": "sti",
    "body": [
      "setInterval(() => { \n\t$2\n }, ${1:time})"
    ],
    "description": "Executes the given function at specified intervals",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ setTimeOut": {
    "key": "setTimeOut",
    "prefix": "sto",
    "body": [
      "setTimeout(() => { \n\t$2\n }, ${1:time})"
    ],
    "description": "Executes the given function after the specified delay",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ promise": {
    "key": "promise",
    "prefix": "prom",
    "body": [
      "return new Promise((resolve, reject) => { \n\t$1\n })"
    ],
    "description": "Creates and returns a new Promise",
    "scope": "javascript,javascriptreact"
  },
  "ðŸŸ¨ thenCatch": {
    "key": "thenCatch",
    "prefix": "thenc",
    "body": [
      ".then((${1:item}) => {\n\t$2\n}).catch((${3:error}) => {\n\t$4\n})"
    ],
    "description": "Add the .then and .catch methods to handle promises",
    "scope": "javascript,javascriptreact"
  }
}